<?php
/**
 * @file
 * expanding_formatter.module.
 *
 * Provides a formatter that allows text fields to expand the rest of the
 * trimmed or summary with a customizable "expand" link.
 */

/**
 * Implements hook_theme().
 */
function expanding_formatter_theme() {
  $hooks['expanding_formatter_ellipsis'] = array(
    'variables' => array(
      'attributes' => array(),
      'ellipsis' => '…',
      'settings' => expanding_formatter_default_settings(),
    ),
  );
  return $hooks;
}

/**
 * Returns HTML for an ellipsis in an expanding formatter field.
 *
 * @param array $variables
 *   An associative array containing:
 *   - attributes: (optional) An array of HTML attributes to apply.
 *   - ellipsis: The visible text to use, defaults to '…'.
 *   - settings: An associative array containing the formatter settings used.
 *
 * @see expanding_formatter_default_settings()
 */
function theme_expanding_formatter_ellipsis($variables) {
  return '<span' . backdrop_attributes($variables['attributes']) . '>' . $variables['ellipsis'] . '</span>';
}

/**
 * Provide default settings for the formatter.
 */
function expanding_formatter_default_settings() {
  return array(
    'trim_length' => 200,
    'trim_ellipsis' => TRUE,
    'effect' => 'slide',
    'trigger_expanded_label' => t('Expand'),
    'trigger_collapsed_label' => t('Collapse'),
    'trigger_classes' => 'button',
    'inline' => TRUE,
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function expanding_formatter_field_formatter_info() {
  $settings = expanding_formatter_default_settings();
  return array(
    'expanding_formatter_text_trimmed' => array(
      'label' => t('Trimmed (expandable)'),
      'field types' => array('text', 'text_long', 'text_with_summary'),
      'settings' => $settings,
    ),
    'expanding_formatter_text_summary_or_trimmed' => array(
      'label' => t('Summary or trimmed (expandable)'),
      'field types' => array('text_with_summary'),
      'settings' => $settings,
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 *
 * Position the expanded formatters to appear after the related text formatters.
 */
function expanding_formatter_field_formatter_info_alter(&$info) {
  // Save the original data.
  $trimmed = $info['expanding_formatter_text_trimmed'];
  unset($info['expanding_formatter_text_trimmed']);
  $summary = $info['expanding_formatter_text_summary_or_trimmed'];
  unset($info['expanding_formatter_text_summary_or_trimmed']);
  // Find the text formatters.
  $formatters = array();
  foreach ($info as $name => $data) {
    $formatters[$name] = $data;
    switch ($name) {
      case 'text_trimmed':
        $formatters['expanding_formatter_text_trimmed'] = $trimmed;
        break;

      case 'text_summary_or_trimmed':
        $formatters['expanding_formatter_text_summary_or_trimmed'] = $summary;
        break;
    }
  }
  // Add them to the end of the list if the text formatters were not found.
  if (!isset($info['expanding_formatter_text_trimmed'])) {
    $formatters['expanding_formatter_text_trimmed'] = $trimmed;
  }
  if (!isset($info['expanding_formatter_text_summary_or_trimmed'])) {
    $formatters['expanding_formatter_text_summary_or_trimmed'] = $summary;
  }
  $info = $formatters;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function expanding_formatter_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $settings += expanding_formatter_default_settings();
  $element = array();
  if (strpos($display['type'], '_trimmed') !== FALSE) {
    $element['trim_length'] = array(
      '#type' => 'number',
      '#title' => t('Trim length'),
      '#size' => 10,
      '#min' => 0,
      '#default_value' => $settings['trim_length'],
      '#required' => TRUE,
    );
    $element['trim_ellipsis'] = array(
      '#type' => 'checkbox',
      '#title' => $display['type'] === 'expanding_formatter_text_summary_or_trimmed' ? t('Append ellipsis on summary or trimmed content') : t('Append ellipsis on trimmed content'),
      '#default_value' => $settings['trim_ellipsis'],
    );
    $element['effect'] = array(
      '#type' => 'select',
      '#title' => t('Animation effect'),
      '#default_value' => $settings['effect'],
      '#empty_value' => '',
      '#options' => array(
        'fade' => t('Fade'),
        'slide' => t('Slide'),
      ),
    );
    $element['trigger_expanded_label'] = array(
      '#type' => 'textfield',
      '#title' => t('Trigger expanded label'),
      '#default_value' => $settings['trigger_expanded_label'],
      '#required' => TRUE,
    );
    $element['trigger_collapsed_label'] = array(
      '#type' => 'textfield',
      '#title' => t('Trigger collapsed label'),
      '#description' => t('Enter text to make the content collapsible. If empty, content will only expand.'),
      '#default_value' => $settings['trigger_collapsed_label'],
    );
    $element['trigger_classes'] = array(
      '#type' => 'textfield',
      '#title' => t('Trigger classes'),
      '#description' => t('Provide additional CSS classes separated by spaces.'),
      '#default_value' => $settings['trigger_classes'],
    );
    $element['inline'] = array(
      '#type' => 'checkbox',
      '#title' => t('Display elements as inline'),
      '#description' => t('If enabled, all elements inside the formatted display will appear as inline. Disable if needed or desired.'),
      '#default_value' => $settings['inline'],
    );
  }
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function expanding_formatter_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $settings += expanding_formatter_default_settings();
  $summary = array();
  if (strpos($display['type'], '_trimmed') !== FALSE) {
    $summary[t('Trim length')] = $settings['trim_length'] . ($settings['trim_ellipsis'] ? ' (' . t('with ellipsis') . ')' : '');
    $summary[t('CSS animation effect')] = (!empty($settings['effect']) ? $settings['effect'] : t('None'));
    if (!empty($settings['trigger_collapsed_label'])) {
      $summary[t('Trigger expanded label')] = $settings['trigger_expanded_label'];
    }
    else {
      $summary[t('Trigger label')] = $settings['trigger_expanded_label'];
    }
    if (!empty($settings['trigger_collapsed_label'])) {
      $summary[t('Trigger collapsed label')] = $settings['trigger_collapsed_label'];
    }
    if (!empty($settings['trigger_classes'])) {
      $summary[t('Trigger classes')] = $settings['trigger_classes'];
    }
  }
  $output = '';
  foreach ($summary as $label => $value) {
    $output .= '<strong>' . $label . '</strong>: ' . check_plain($value) . '<br />';
  }
  return $output;
}


/**
 * Implements hook_field_formatter_view().
 */
function expanding_formatter_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  if (($items && $display['type'] === 'expanding_formatter_text_trimmed' || $display['type'] === 'expanding_formatter_text_summary_or_trimmed')) {
    // Get the settings and extend default ones that don't exist.
    $settings = $display['settings'];
    $settings += expanding_formatter_default_settings();

    // Create a link for the toggle.
    $trigger_classes = array();
    if (!empty($settings['trigger_classes'])) {
      $trigger_classes = array_unique(array_merge($trigger_classes, explode(' ', $settings['trigger_classes'])));
    }
    $trigger = array(
      '#theme_wrappers' => array('container'),
      '#attributes' => array(
        'class' => array(
          'expanding-formatter-trigger',
        ),
      ),
      'link' => array(
        '#theme' => 'link',
        '#text' => t($settings['trigger_expanded_label']),
        '#path' => '#',
        '#options' => array(
          'external' => TRUE,
          'html' => FALSE,
          'attributes' => array(
            'class' => $trigger_classes,
          ),
        ),
      ),
    );

    // Iterate through each item in the field, for unlimited values.
    $attributes = array();
    $attributes['class'] = array('expanding-formatter');
    if (!empty($settings['inline'])) {
      $attributes['data-inline'] = $settings['inline'];
    }
    if (!empty($settings['effect'])) {
      $attributes['data-effect'] = $settings['effect'];
    }
    if (!empty($settings['trigger_collapsed_label'])) {
      $attributes['data-expanded-label'] = t($settings['trigger_expanded_label']);
      $attributes['data-collapsed-label'] = t($settings['trigger_collapsed_label']);
    }

    // Attach the necessary resources.
    $module_path = backdrop_get_path('module', 'expanding_formatter');
    foreach ($items as $delta => $item) {
      $element[$delta] = array(
        '#theme_wrappers' => array('container'),
        '#expanding_formatter' => TRUE,
        '#attributes' => $attributes,
        '#attached' => array(
          'css' => array($module_path . '/css/expanding_formatter.css'),
          'js' => array($module_path . '/js/expanding_formatter.js'),
        ),
      );
      $original = _text_sanitize($instance, $langcode, $item, 'value');
      $original = str_replace(array("\r", "\n"), '', $original);
      if ($display['type'] === 'expanding_formatter_text_summary_or_trimmed' && !empty($item['summary'])) {
        $element[$delta]['summary'] = array(
          '#theme_wrappers' => array('container'),
          '#attributes' => array(
            'class' => array('expanding-formatter-summary'),
          ),
          'value' => array(
            '#markup' => _text_sanitize($instance, $langcode, $item, 'summary'),
          ),
        );
      }
      else {
        if ($settings['trim_length'] === 0) {
          $summary = '';
        }
        else {
          $summary = text_summary($original, $instance['settings']['text_processing'] ? $item['format'] : NULL, $settings['trim_length']);
        }
        $element[$delta]['summary'] = array(
          '#theme_wrappers' => array('container'),
          '#attributes' => array(
            'class' => array('expanding-formatter-summary'),
          ),
          'value' => array(
            '#markup' => $summary,
          ),
        );
      }
      if ($instance['settings']['text_processing']) {
        $format = filter_format_load($item['format']);
        $filters = $format->filters;
      }
      // Strip tags if HTML corrector filter is used.
      if (!empty($filters['filter_htmlcorrector']->status)) {
        $content = str_replace(strip_tags($element[$delta]['summary']['value']['#markup']), '', $original);
      }
      else {
        $content = str_replace($element[$delta]['summary']['value']['#markup'], '', $original);
      }
      // Render expandable content.
      if (!empty($content)) {
        if ($settings['trim_ellipsis']) {
          $element[$delta]['ellipsis'] = array(
            '#theme' => 'expanding_formatter_ellipsis',
            '#settings' => $settings,
            '#attributes' => array(
              'class' => array('expanding-formatter-ellipsis'),
            ),
          );
        }
        $element[$delta]['content'] = array(
          '#theme_wrappers' => array('container'),
          '#attributes' => array(
            'class' => array('expanding-formatter-content'),
          ),
          'value' => array(
            '#markup' => $content,
          ),
        );
        $element[$delta]['trigger'] = $trigger;
      }
      // Content is short enough, render entire original output.
      else {
        $element[$delta] = array(
          '#markup' => $original,
        );
      }
    }
    return $element;
  }
}
